install.packages("ggfortify", "devtools", "remotes")
install.packages('ggfortify', "devtools", "remotes")
install.packages(ggfortify)
install.packages(devtools)
install.packages(remotes)
install.packages("ggfortify")
install.packages("devtools")
install.packages("remotes")
# Iris dataset - 3 species, 50 samples each
str(iris)
summary(iris)
# Create factor var w/levels for species category
iris$Species <- factor(iris$Species,
levels = c("versicolor", "virginica",
"setosa"))
describe(iris, TRUE)
# Create factor var w/levels for species category
iris$Species <- factor(iris$Species,
levels = c("versicolor", "virginica",
"setosa"))
summary(iris)
# remove categorical variable
Iris_pca <- subset(iris, select = -c(Species))
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# Iris dataset - 3 species, 50 samples each
str(iris)
summary(iris)
# Create factor var w/levels for species category
iris$Species <- factor(iris$Species,
levels = c("versicolor", "virginica",
"setosa"))
# remove categorical variable
Iris_pca <- subset(iris, select = -c(Species))
summary(Iris_pca)
summary(Iris_pca)
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE)   # STD of 1
summary(Iris_pca)
str(Iris_pca)
#Plotting a PCA - checks for linearity and normality
library(ggfortify)
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
iris_pca_plot
# screeplot - how many components to keep
plot_iris_pca <- plot(Iris_pca, type="lines")
plot_iris_pca
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(iris.pca)
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris.pca)
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(iris_pca_plot)
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
biplot_iris_pca
library(rgl)
install.packages("rgl")
library(rgl)
#interactive plot
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
# scores
iris_pca_scores <- Iris_pca$scores
x <- scores[,1]   #pc  1
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE   # STD of 1
scores=TRUE)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
scores=TRUE)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
scores=TRUE)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
COR=TRUE,
scores=TRUE)
# PCA
Iris_pca <- princomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
COR=TRUE,
scores=TRUE)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
summary(Iris_pca)
str(Iris_pca)
#Plotting a PCA - checks for linearity and normality
library(ggfortify)
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
iris_pca_plot
# screeplot - how many components to keep
plot_iris_pca <- plot(Iris_pca, type="lines")
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
biplot_iris_pca
library(rgl)
# scores
iris_pca_scores <- Iris_pca$scores
x <- scores[,1]   #pc  1
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
plot3d(Iris_pca$scores[,1:3])
plot3d(Iris_pca$scores[,1:3], col=Iris_pca$Species)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
library(rgl)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
# Create factor var w/levels for species category
iris$Species <- factor(iris$Species,
levels = c("versicolor", "virginica",
"netosa"))
# remove categorical variable
Iris_pca <- subset(iris, select = -c(Species))
summary(Iris_pca)
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
summary(Iris_pca)
str(Iris_pca)
#Plotting a PCA - checks for linearity and normality
library(ggfortify)
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
iris_pca_plot
# screeplot - how many components to keep
plot_iris_pca <- plot(Iris_pca, type="lines")
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
library(rgl)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
# Create factor var w/levels for species category
iris$Species <- factor(iris$Species,
levels = c("versicolor", "virginica", "setosa"))
# remove categorical variable
Iris_pca <- subset(iris, select = -c(Species))
summary(Iris_pca)
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
summary(Iris_pca)
str(Iris_pca)
#Plotting a PCA - checks for linearity and normality
library(ggfortify)
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
iris_pca_plot
# screeplot - how many components to keep
plot_iris_pca <- plot(Iris_pca, type="lines")
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
library(rgl)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
Iris_pca
iris
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
# scores
iris_pca_scores <- Iris_pca$scores
# scores
iris_pca_scores <- Iris_pca$scores
x <- scores[,1]   #pc  1
data(iris)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
# scores
iris_pca_scores <- Iris_pca$scores
x <- scores[,1]   #pc  1
y <- scores[,2]   #pc  2
z <- scores[,3]   #pc  3
data(Iris_pca)
data(Iris_pca)
data(iris_pca)
# not great tools for 3d in R, but we can look at the 3 pcs with most variance
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
library(rgl)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
data(iris_pca)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
# scores
iris_pca_scores <- Iris_pca$scores
x <- scores[,1]   #pc  1
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
library(rgl)
data(iris_pca)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
# scores
iris_pca_scores <- Iris_pca$scores
x <- scores[,1]   #pc  1
y <- scores[,2]   #pc  2
z <- scores[,3]   #pc  3
# load scores
loads <- pca$loadings
# Scale factor for loadings
scale.loads <- 5
# 3D plot
library(plotly)
p <- plot_ly() %>%
add_trace(x=x, y=y, z=z,
type="scatter3d", mode="markers",
marker = list(color=y,
colorscale = c("#FFE1A1", "#683531"),
opacity = 0.7))
for (k in 1:nrow(loads)) {
x <- c(0, loads[k,1])*scale.loads
y <- c(0, loads[k,2])*scale.loads
z <- c(0, loads[k,3])*scale.loads
p <- p %>% add_trace(x=x, y=y, z=z,
type="scatter3d", mode="lines",
line = list(width=8),
opacity = 1)
}
print(p)
with(iris, table(cluster, Species))
# scores
iris_pca_scores <- Iris_pca$scores
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE)   # STD of 1
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE)   # STD of 1
summary(Iris_pca)
Iris_pca
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
summary(Iris_pca)
str(Iris_pca)
#Plotting a PCA - checks for linearity and normality
library(ggfortify)
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
iris_pca_plot
# screeplot - how many components to keep
plot_iris_pca <- plot(Iris_pca, type="lines")
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
Iris_pca <- prcomp(Iris_pca
center = TRUE,   # mean of 0
scale. = TRUE)   # STD of 1
library(rgl)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
Iris_pca <- prcomp(Iris_pca
center = TRUE,   # mean of 0
scale. = TRUE)   # STD of 1
Iris_pca <- prcomp(Iris_pca
center = TRUE,   # mean of 0
scale. = TRUE    # STD of 1
)
Iris_pca <- prcomp(Iris_pca
center = TRUE,   # mean of 0
scale. = TRUE    # STD of 1
)
Iris_pca <- prcomp(Iris_pca
center = TRUE, scale. = TRUE)
Iris_pca <- prcomp(Iris_pca,
center = TRUE, scale. = TRUE)
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
)
# Iris dataset - 3 species, 50 samples each
str(iris)
summary(iris)
# Create factor var w/levels for species category
iris$Species <- factor(iris$Species,
levels = c("versicolor", "virginica", "setosa"))
# remove categorical variable
Iris_pca <- subset(iris, select = -c(Species))
summary(Iris_pca)
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
# Iris dataset - 3 species, 50 samples each
str(iris)
summary(iris)
# remove categorical variable
Iris_pca <- subset(iris, select = -c(Species))
summary(Iris_pca)
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# PCA
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
# PCA
Iris_pca <- prcomp(iris[,1:4],
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
summary(Iris_pca)
str(Iris_pca)
#Plotting a PCA - checks for linearity and normality
library(ggfortify)
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
iris_pca_plot
# screeplot - how many components to keep
plot_iris_pca <- plot(Iris_pca, type="lines")
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
Iris_pca <- prcomp(Iris_pca,
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
)
Iris_pca <- prcomp(iris[,1:4],
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
library(rgl)
plot3d(Iris_pca$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
plot3d(Iris_pca$scores[,1:3])
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
plot3d(Iris_pca$scores[,1:3])
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
# scores
iris_pca_scores <- Iris_pca$scores
install.packages("ggfortify")
install.packages("devtools")
install.packages("remotes")
