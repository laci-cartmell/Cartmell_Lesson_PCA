group_species <- factor(iris$Species,
levels = c("versicolor", "virginica", "setosa"))
# Create factor var w/levels for species category
group_species <- factor(iris$Species,
levels = c("versicolor", "virginica", "setosa"))
summary(group_species)
install.packages("pca3d")
# Iris dataset - 3 species, 50 samples each
str(iris)
summary(iris)
# Create factor var w/levels for species category
group_species <- factor(iris$Species,
levels = c("versicolor", "virginica", "setosa"))
summary(group_species)
# Check correlation (usually done earlier)
round(cor(iris[,1:4]), 2)
# PCA
Iris_pca <- prcomp(iris[,1:4],
center = TRUE,   # mean of 0
scale. = TRUE,   # STD of 1
cor=TRUE,
scores=TRUE)
summary(Iris_pca)
str(Iris_pca)
#Plotting a PCA - checks for linearity and normality
library(ggfortify)
#plots PC1,PC2 automatically
iris_pca_plot <- autoplot(Iris_pca,
data = iris,
#  colour = 'Species'
)
iris_pca_plot
# screeplot - how many components to keep
plot_iris_pca <- plot(Iris_pca, type="lines")
# biplot - how components were combined in 2-d
biplot_iris_pca <- biplot(Iris_pca)
#####
library(pca3d)
pca3d(Iris_pca, group=group_species)
#visualize with interactive plot
snapshotPCA3d(file="first3pcs.png")
pca3d(Iris_pca, group=group_species)
#visualize with interactive plot
snapshotPCA3d(file="first3pcs.png")
#create figure for saving
pca2d(Iris_pca, group=group_species, legend="topright")
pca3d(Iris_pca$scores[,1:3], group=group_species)
pca3d(Iris_pca$scores[1:3], group=group_species)
pca3d
pca3d(Iris_pca, components = 1:3, group=group_species)
#visualize with interactive plot
snapshotPCA3d(file="first3pcs.png")
#create figure for saving
pca2d(Iris_pca, group=group_species, legend="topright")
#####
library(pca3d)
pca3d(Iris_pca, components = 1:3, group=group_species)
pca3d(Iris_pca, components = 2:4, group=group_species)
library(readxl)
Cartmell_NLCD_Rlesson <- read_excel("Cartmell_NLCD_Rlesson.xlsx")
View(Cartmell_NLCD_Rlesson)
# read in data
library(readxl)
Cartmell_NLCD_Rlesson <- read_excel("Cartmell_NLCD_Rlesson.xlsx")
View(Cartmell_NLCD_Rlesson)
datatable <- Cartmell_NLCD_Rlesson
# Create factor var w/levels for colony as category
group_colony  <- factor(Cartmell_NLCD_Rlesson$COLONYNAME,
levels = unique(Cartmell_NLCD_Rlesson$COLONYNAME))
View(colonynames)
View(group_colony)
print(group_colony)
datatable <- Cartmell_NLCD_Rlesson
# Create factor var w/levels for colony as category
group_colony  <- factor(Cartmell_NLCD_Rlesson$COLONYNAME,
levels = unique(Cartmell_NLCD_Rlesson$COLONYNAME))
print(group_colony)
#  SPECIFY SUBSTRATE/YEAR/COLONYNAME AS FACTOR VARS, INDICATE BASE FOR SUBSTRATE AND YEAR
datatable$Substrate <- as.factor(datatable$Substrate)
datatable$Year <- as.factor(datatable$Year)
datatable$COLONYNAME = factor(datatable$COLONYNAME,
levels = unique(datatable$COLONYNAME))
summary(datatable)
#Check for NaN or Inf and replace with NA if present
#is all a variable NA
all(is.na(datatable$Size))
#Replace NaN & Inf with NA
datatable[is.na(datatable) | datatable=="-Inf"] = NA
# rank in r - ranking our df by H_P
df %>%
+   group_by(COLONYNAME) %>%
+   mutate(good_ranks = order(order(Hay_Pasture, decreasing=TRUE)))
# rank in r - ranking our df by H_P
df %>%
+   group_by(COLONYNAME) %>%
+   mutate(good_ranks = order(order(Hay_Pasture, decreasing=TRUE)))
data <- datatable[,c(18:28)]
data.pca <- prcomp(datatable[,c(5:11)], center = TRUE, scale. = TRUE)
summary(data.pca)
#look at PCA object
str(data.pca)
#plotting pca
# loading library
install.packages("ggfortify")
install.packages("ggfortify")
install.packages("ggfortify")
library(ggfortify)
data.pca.plot <- autoplot(data.pca,
data = datatable,
colour = 'Size')
data.pca.plot
data.pca <- prcomp(datatable[,c(5:11)], center = TRUE, scale. = TRUE)
summary(data.pca)
#look at PCA object
str(data.pca)
summary(datatable)
biplot.data.pca <- biplot(data.pca)
biplot.data.pca
#how many components
plot.data.pca <- plot(data.pca, type="1")
install.packages("devtools")
library(devtools)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("vqv/ggbiplot")
ggbiplot(data.pca)
library(ggbiplot)
remotes::install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
library(ggbiplot)
summary(datatable)
biplot.data.pca <- biplot(data.pca)
biplot.data.pca
data.pca.plot <- autoplot(data.pca,
data = datatable,
colour = 'Size')
data.pca.plot
data.pca.plot2 <- autoplot(data.pca,
data = datatable,
colour = 'Substrate')
data.pca.plot
data.pca.plot2
install.packages("pca3d")
library(pca3d)
pca3d(data.pca)
#create group of year
pca3d(data.pca, components = 1:3, group=Year)
#create group of year
pca3d(data.pca, components = 1:3, group=datable$Year)
#create group of year
pca3d(data.pca, components = 1:3, group=datatable$Year)
install.packages("MuMIn")
install.packages("AICcmodavg")
library(MuMIn)
library(AICcmodavg)
#simple way to get rid of NA's
##glm will automatically drop NA's in independent variables, but not dependent
banding_na<-na.omit(banding)
#Trick: turn your binomial variable into 1's and 0's
banding$location_numeric<-ifelse( #name a new variable, and use if else function
banding$location=="Forb",0,1) #if location equals "Forb" turn into a 0 else turn it into a 1
AICC_models <- dredge(mass_model,
rank = "AICC",
fixed = "species")
glm_example<- glm(  #glm function to run model
mass~  #dependent variables that you want to predict
species+fat+wing*tarsus, #independent variables that you want to use to predict
## * indicates interaction
data = banding_na,  #reference data set
family=gaussian, #reference family name (here is where you would also put your link function)
na.action = na.fail
)
library(readr)
SD_banding_data <- read_csv("~/CARTMELLBIOL7263.rmd/Assignments/GraduateLessons/WestAmy_AICC/SD_banding_data.csv")
View(SD_banding_data)
#################################
### PART 2 - IC
#################################
AIC(glm_example)
AICc(glm_example)
#create a large model with thoughtful variables
band_model<- glm(mass~species+tarsus*wing+fat, data = banding_na, family=gaussian,
na.action = na.fail) #have to include line to knit, but it works better if you run code without na.action
#simple way to get rid of NA's
##glm will automatically drop NA's in independent variables, but not dependent
banding_na<-na.omit(banding)
glm_example<- glm(  #glm function to run model
mass~  #dependent variables that you want to predict
species+fat+wing*tarsus, #independent variables that you want to use to predict
## * indicates interaction
data = banding_na,  #reference data set
family=gaussian, #reference family name (here is where you would also put your link function)
)
#Trick: turn your binomial variable into 1's and 0's
banding$location_numeric<-ifelse( #name a new variable, and use if else function
banding$location=="Forb",0,1) #if location equals "Forb" turn into a 0 else turn it into a 1
#binomial glm, same as gaussian, but change family name
Band_binomial<- glm(location_numeric~temp, data= banding, family=binomial)
#not very useful, gives you intercepts for each variable
glm_example
#nicer, but this is not a t-test
summary(glm_example)
#simple way to get rid of NA's
##glm will automatically drop NA's in independent variables, but not dependent
banding_na<-na.omit(SD_banding_data)
glm_example<- glm(  #glm function to run model
mass~  #dependent variables that you want to predict
species+fat+wing*tarsus, #independent variables that you want to use to predict
## * indicates interaction
data = banding_na,  #reference data set
family=gaussian, #reference family name (here is where you would also put your link function)
)
#Trick: turn your binomial variable into 1's and 0's
banding$location_numeric<-ifelse( #name a new variable, and use if else function
banding$location=="Forb",0,1) #if location equals "Forb" turn into a 0 else turn it into a 1
#simple way to get rid of NA's
##glm will automatically drop NA's in independent variables, but not dependent
banding <- SD_banding_data
banding_na<-na.omit(banding)
glm_example<- glm(  #glm function to run model
mass~  #dependent variables that you want to predict
species+fat+wing*tarsus, #independent variables that you want to use to predict
## * indicates interaction
data = banding_na,  #reference data set
family=gaussian, #reference family name (here is where you would also put your link function)
)
#Trick: turn your binomial variable into 1's and 0's
banding$location_numeric<-ifelse( #name a new variable, and use if else function
banding$location=="Forb",0,1) #if location equals "Forb" turn into a 0 else turn it into a 1
#binomial glm, same as gaussian, but change family name
Band_binomial<- glm(location_numeric~temp, data= banding, family=binomial)
#not very useful, gives you intercepts for each variable
glm_example
#nicer, but this is not a t-test
summary(glm_example)
#Heck yeah! P-values, but have to go to one of above summaries to get intercept estimates
anova(glm_example, test="F")
#################################
### PART 2 - IC
#################################
AIC(glm_example)
AICc(glm_example)
#create a large model with thoughtful variables
band_model<- glm(mass~species+tarsus*wing+fat, data = banding_na, family=gaussian,
na.action = na.fail) #have to include line to knit, but it works better if you run code without na.action
#modeling dredging
AICc_band_models <- dredge( #construct all possible models
band_model,    #use band model as a reference
rank = "AICc", #use AICc scores to compare
fixed = "species") #list variables that you want to include in every model
#Make a list of all the models
model_list <- get.models(AICc_band_models, #retrieve models from dredged data
subset = TRUE) #select which models to retrieve
model_list[1] #check out info from a single model
#Make a messy but informative AICc table
AICc_table_band<-model.sel(model_list)
#Trick: create a list of model names
model_name_list<-NULL #make an empty list
for (i in 1:10){
model_name_list = c(model_name_list, as.character(model_list[[i]][['formula']]))
} #loop through model output to extract formula for each model
model_name_listb <- model_name_list[seq(3, length(model_name_list), 3)] #select every third element from list and put it in a new list
modavg_table<-aictab(model_list, #make a table with models from your list
modnames = model_name_listb, #label the models with your names list
second.ord = TRUE,   #Use AICc (FALSE gives you AIC)
sort = TRUE) #Order based on model weight
#View table
modavg_table
library(AICcmodavg)
#Make a messy but informative AICc table
AICc_table_band<-model.sel(model_list)
#Trick: create a list of model names
model_name_list<-NULL #make an empty list
for (i in 1:10){
model_name_list = c(model_name_list, as.character(model_list[[i]][['formula']]))
} #loop through model output to extract formula for each model
model_name_listb <- model_name_list[seq(3, length(model_name_list), 3)] #select every third element from list and put it in a new list
modavg_table<-aictab(model_list, #make a table with models from your list
modnames = model_name_listb, #label the models with your names list
second.ord = TRUE,   #Use AICc (FALSE gives you AIC)
sort = TRUE) #Order based on model weight
#View table
modavg_table
years <- c("2001", "2004", "2006", "2008", "2013", "2016", "2019")
years
install.packages("ggfortify")
install.packages("ggfortify")
install.packages("devtools")
install.packages("devtools")
install.packages("remotes")
install.packages("remotes")
install.packages("rgl")
install.packages("pca3d")
install.packages("rgl")
install.packages("pca3d")
install.packages("devtools")
install.packages("devtools")
library(devtools)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
install.packages("remotes")
install.packages("remotes")
install.packages("ggbiolot")
# read in data
library(readxl)
Cartmell_NLCD_Rlesson <- read_excel("Cartmell_NLCD_Rlesson.xlsx")
View(Cartmell_NLCD_Rlesson)
# rename something easy to type and applicable
datatable <- Cartmell_NLCD_Rlesson
#check for any issues
summary(datatable)
# substrate has 4 categories - refers to structure the nest is built on
substrates <- c("1", "2", "3", "4")
datatable$Substrate <- as.factor(datatable$Substrate)
#year has 7 categories
years <- c("2001", "2004", "2006", "2008", "2013", "2016", "2019")
datatable$Year <- as.factor(datatable$Year)
#not quite a categorical var, but will still treat as factor
colonysites <- unique(datatable$COLONYNAME)
datatable$COLONYNAME = factor(datatable$COLONYNAME,
levels = unique(datatable$COLONYNAME))
#check factor(datatable$var) worked
summary(datatable)
#Check for NaN or Inf and replace with NA if present
#is all a variable NA
all(is.na(datatable$Size))
#Replace NaN & Inf with NA
datatable[is.na(datatable) | datatable=="-Inf"] = NA
#check for replacement
summary(datatable)
# Check correlation if you're feeling adventurous
round(cor(iris[,1:4]), 2) #iris data
round(cor(datatable[,5:11]), 2) #nlcd data
#remember our og
summary(datatable)
# run a pca
data.pca <- prcomp(datatable[,c(5:11)], center = TRUE, scale. = TRUE) #5-11 columns
summary(data.pca)
#look at PCA object
str(data.pca)
#loadings
data.pca
#plotting pca
# loading library
library(ggfortify)
biplot.data.pca <- biplot(data.pca)
biplot.data.pca
library(ggbiplot)
ggbiplot(data.pca)
biplot.data.pca <- biplot(data.pca)
ggbiplot(data.pca)
#label each point with year
ggbiplot(data.pca, label = datatable$Year)
#label each point with year
ggbiplot(data.pca, label = datatable$Year)
datatable
data.pca.plot <- autoplot(data.pca,
data = datatable,
colour = 'catsize')
data.pca.plot
##
# Add color! --> make at least one of these plots, substrate shows clearest grouping
#label with group year
data.pca.year <- autoplot(data.pca,
data = datatable,
colour = 'Year')
#label with group size category
data.pca.size <- autoplot(data.pca,
data = datatable,
colour = 'catsize')
#label with group present or absent category
data.pca.presence <- autoplot(data.pca,
data = datatable,
colour = 'Presence')
#label with group Substrate
data.pca.substrate <- autoplot(data.pca,
data = datatable,
colour = 'Substrate')
#see the plots
data.pca.year
data.pca.size
data.pca.presence
data.pca.substrate
# if not already, install
install.packages("ggfortify")
install.packages("ggfortify")
install.packages("devtools")
install.packages("remotes")
install.packages("rgl")
install.packages("pca3d")
library(pca3d)
#
pca3d(data.pca)
# create a 3d interactiable plot
pca3d(data.pca)
pca3d
#create group of year
pca3d(data.pca, components = 1:3, group=datatable$Year)
#create group of substrate - or other group cat. variable
pca3d(data.pca, components = 1:3, group=datatable$Substrate)
#visualize with interactive plot
snapshotPCA3d(file="first3pc_substrate.png")
#create figure for saving
pca2d(colony_pca, group=, legend="topright")
# screeplot - how many components to keep
data.pca <- plot(data.pca, type="lines")
biplot.data.pca <- biplot(data.pca)
ggbiplot(data.pca)
# create a 3d interactiable plot
pca3d(data.pca)
install.packages("ggfortify")
install.packages("ggfortify")
library(devtools)
# read in data
library(readxl)
Cartmell_NLCD_Rlesson <- read_excel("Cartmell_NLCD_Rlesson.xlsx")
# rename something easy to type and applicable
datatable <- Cartmell_NLCD_Rlesson
#check for any issues
summary(datatable)
# substrate has 4 categories - refers to structure the nest is built on
substrates <- c("1", "2", "3", "4")
datatable$Substrate <- as.factor(datatable$Substrate)
#year has 7 categories
years <- c("2001", "2004", "2006", "2008", "2013", "2016", "2019")
datatable$Year <- as.factor(datatable$Year)
#not quite a categorical var, but will still treat as factor
colonysites <- unique(datatable$COLONYNAME)
datatable$COLONYNAME = factor(datatable$COLONYNAME,
levels = unique(datatable$COLONYNAME))
#check factor(datatable$var) worked
summary(datatable)
#Check for NaN or Inf and replace with NA if present
#is all a variable NA
all(is.na(datatable$Size))
#Replace NaN & Inf with NA
datatable[is.na(datatable) | datatable=="-Inf"] = NA
#check for replacement
summary(datatable)
# Check correlation if you're feeling adventurous
round(cor(iris[,1:4]), 2) #iris data
round(cor(datatable[,5:11]), 2) #nlcd data
#remember our og
summary(datatable)
# run a pca
data.pca <- prcomp(datatable[,c(5:11)], center = TRUE, scale. = TRUE) #5-11 columns
summary(data.pca)
#look at PCA object
str(data.pca)
#loadings
data.pca
#plotting pca
# loading library
library(ggfortify)
# screeplot - how many components to keep
data.pca <- plot(data.pca, type="lines")
biplot.data.pca <- biplot(data.pca)
# screeplot - how many components to keep
data.pca <- plot(data.pca, type="lines")
#remember our og
summary(datatable)
# run a pca
data.pca <- prcomp(datatable[,c(5:11)], center = TRUE, scale. = TRUE) #5-11 columns
summary(data.pca)
#look at PCA object
str(data.pca)
#loadings
data.pca
#plotting pca
# loading library
library(ggfortify)
# screeplot - how many components to keep
data.pca <- plot(data.pca, type="lines")
biplot.data.pca <- biplot(data.pca)
ggbiplot(data.pca)
##
# Add color! --> make at least one of these plots, substrate shows clearest grouping
#label with group year
data.pca.year <- autoplot(data.pca,
data = datatable,
colour = 'Year')
#label with group size category
data.pca.size <- autoplot(data.pca,
data = datatable,
colour = 'catsize')
#label with group present or absent category
data.pca.presence <- autoplot(data.pca,
data = datatable,
colour = 'Presence')
install.packages("ggbiolot")
install.packages("remotes")
install.packages("remotes")
#plotting pca
# loading library
library(ggfortify)
#remember our og
summary(datatable)
# run a pca
data.pca <- prcomp(datatable[,c(5:11)], center = TRUE, scale. = TRUE) #5-11 columns
summary(data.pca)
#look at PCA object
str(data.pca)
#loadings
data.pca
#plotting pca
# loading library
library(ggfortify)
# screeplot - how many components to keep
data.pca <- plot(data.pca, type="lines")
biplot.data.pca <- biplot(data.pca)
# screeplot - how many components to keep
data.pca <- plot(data.pca, type="lines")
